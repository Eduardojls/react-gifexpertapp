{"version":3,"sources":["component/AddCategory.js","helpers/getGifs.js","component/GifGridItem.js","component/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAK3C,SACI,uBACIC,KAAO,OACPC,MAAST,EACTU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCCPO,EAAc,SAACC,GAC1B,IAAQJ,EAAeI,EAAfJ,MAAOV,EAAQc,EAARd,IAEf,OACE,sBAAKe,UAAU,yCAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCLGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAExB,ECF0B,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACPzB,EAAQC,GACHyB,MAAM,SAAAC,GACHH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGtB,CAACrB,IACGsB,EDdyBK,CAAa3B,GAAjCa,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAoDjB,EAApD,OACEqB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,YAAf,SACIJ,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEVRiB,EAAe,WAE1B,MAAoC1C,mBAAS,CAAC,aAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1cd14699.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Where user enter through form the gif topic they want to see<\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    // useState Hook: Store and edit the content written in the form\r\n    const [inputValue, setInputValue ] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n        };\r\n    };\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type = \"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired       \r\n};\r\n\r\n","// Fetch API: Se hace la peticiÃ³n HTTP y retorna un objeto con la data que se va a usar\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=Af90QrP9tMFJJDy0cXdweqpMinRsgChG&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = (props) => {\r\n  const { title, url } = props;\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from '../component/GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n      { loading && <p className=\"animate__animated animate__flash\">Loading..</p> }\r\n      <div className=\"card-grid\">\r\n        { images.map((img) => (\r\n          <GifGridItem\r\n            key={img.id}\r\n            {...img}\r\n          />\r\n        ))}\r\n      </div> \r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category]);\r\n    return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./component/AddCategory\";\r\nimport { GifGrid } from \"./component/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  // Where home screen content is loaded\r\n  const [categories, setCategories] = useState([\"shingeki\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import ReactDOM from 'react-dom';\r\nimport { GifExpertApp } from './GifExpertApp';\r\nimport './index.css';\r\n\r\n// Where app starts rendering\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}